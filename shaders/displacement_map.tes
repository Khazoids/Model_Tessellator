#version 410 core

layout( quads, equal_spacing, ccw) in;

uniform sampler2D displacementMap;
uniform float displacementFactor;
uniform mat4 mvp;
uniform mat4 mv;

in TCS_OUT {
	vec3 Position;
	vec3 Normal;
	vec2 TexCoord;
	vec3 Tangent;
} tes_in[];


out TES_OUT {
	vec3 Normal;
	vec2 TexCoord;
	vec3 TangentLightPos;
	vec3 TangentViewPos;
	vec3 TangentFragPos;
} tes_out;


vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2, vec2 v3)
{
	vec2 a = mix(v0, v1, gl_TessCoord.x);
    vec2 b = mix(v3, v2, gl_TessCoord.x);
    return mix(a, b, gl_TessCoord.y);
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2, vec3 v3)
{
	vec3 a = mix(v0, v1, gl_TessCoord.x);
    vec3 b = mix(v3, v2, gl_TessCoord.x);
    return mix(a, b, gl_TessCoord.y);
}


void main()
{	
	vec3 pos = interpolate3D(tes_in[0].Position, tes_in[1].Position, tes_in[2].Position, tes_in[3].Position);
	vec3 norm = interpolate3D(tes_in[0].Normal, tes_in[1].Normal, tes_in[2].Normal, tes_in[3].Normal);
	vec3 tan = interpolate3D(tes_in[0].Tangent, tes_in[1].Tangent, tes_in[2].Tangent, tes_in[3].Tangent);
	vec2 txc = interpolate2D(tes_in[0].TexCoord, tes_in[1].TexCoord, tes_in[2].TexCoord, tes_in[3].TexCoord);

	tes_out.TexCoord = txc;
	tes_out.Normal = normalize(norm);
	
	float displacement = texture(displacementMap, tes_out.TexCoord).x;
	pos += normalize(norm) * displacement * displacementFactor;
	vec3 lightPos = vec3(0.5f, 1.0f, 0.3f);
	vec3 viewPos = vec3(0.0f, 0.0f, 3.0f);

	mat3 normalMatrix = transpose(inverse(mat3(mv)));

	vec3 T = normalize(normalMatrix * tan);
	vec3 N = normalize(normalMatrix * norm);
	
	T = normalize(T - dot(T, N) * N);
	vec3 B = cross(N, T);

	mat3 TBN = transpose(mat3(T, B, N));
	tes_out.TangentLightPos = TBN * lightPos;
	tes_out.TangentViewPos = TBN * viewPos;
	tes_out.TangentFragPos = TBN * vec3(mv * vec4(pos, 1.0));

	gl_Position = mvp * vec4(pos, 1.0);
}